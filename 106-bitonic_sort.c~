#include "sort.h"

/**
 * swap - Swaps two elements of an array
 *
 * @a: First element
 * @b: Second element
 */
void swap(int *a, int *b)
{
int tmp = *a;
*a = *b;
*b = tmp;
}

/**
 * bitonic_merge - Sorts and merges the two halves of an array
 *
 * @array: Array to sort and merge
 * @low: Starting index of the first half of the array
 * @count: Number of elements to sort and merge
 * @dir: Direction of sorting (1 for ascending, 0 for descending)
 */
void bitonic_merge(int *array, int low, int count, int dir)
{
if (count > 1) /* If there's at least two elements */
{
int k = count / 2, i;

printf("Merging [%d/%d] (%s):\n", count, count, (dir == 1) ? "UP" : "DOWN");
print_array(array + low, count);

for (i = low; i < low + k; i++)
if ((array[i] > array[i + k]) == dir)
swap(&array[i], &array[i + k]);

bitonic_merge(array, low, k, dir);
bitonic_merge(array, low + k, k, dir);
}
}

/**
 * bitonic_sort - Sorts an array of integers in ascending order us
 *
 * @array: Array to sort
 * @size: Size of the array
 */
void bitonic_sort(int *array, size_t size)
{
size_t i, j, k;
int up = 1, down = 0;

if (array == NULL || size < 2)
return;
for (k = 2; k <= size; k <<= 1)
{
for (j = k >> 1; j > 0; j >>= 1)
for (i = 0; i < (int)size; i += k)
bitonic_merge(array, i, j, up);
bitonic_merge(array, i + j, j, down);
for (i = 0; i < (int)size; i += k)
bitonic_merge(array, i, k, up);
}
}
